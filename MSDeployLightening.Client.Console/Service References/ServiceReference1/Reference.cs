//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MSDeployLightening.Client.Console.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IMSDeployAllTheThings")]
    public interface IMSDeployAllTheThings {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSDeployAllTheThings/ShouldIUseMSDeploy", ReplyAction="http://tempuri.org/IMSDeployAllTheThings/ShouldIUseMSDeployResponse")]
        bool ShouldIUseMSDeploy();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSDeployAllTheThings/ShouldIUseMSDeploy", ReplyAction="http://tempuri.org/IMSDeployAllTheThings/ShouldIUseMSDeployResponse")]
        System.Threading.Tasks.Task<bool> ShouldIUseMSDeployAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSDeployAllTheThings/WhenShouldIUseMSDeploy", ReplyAction="http://tempuri.org/IMSDeployAllTheThings/WhenShouldIUseMSDeployResponse")]
        System.DateTime WhenShouldIUseMSDeploy();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSDeployAllTheThings/WhenShouldIUseMSDeploy", ReplyAction="http://tempuri.org/IMSDeployAllTheThings/WhenShouldIUseMSDeployResponse")]
        System.Threading.Tasks.Task<System.DateTime> WhenShouldIUseMSDeployAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSDeployAllTheThings/WhoShouldUseMSDeploy", ReplyAction="http://tempuri.org/IMSDeployAllTheThings/WhoShouldUseMSDeployResponse")]
        string WhoShouldUseMSDeploy(string yourName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSDeployAllTheThings/WhoShouldUseMSDeploy", ReplyAction="http://tempuri.org/IMSDeployAllTheThings/WhoShouldUseMSDeployResponse")]
        System.Threading.Tasks.Task<string> WhoShouldUseMSDeployAsync(string yourName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMSDeployAllTheThingsChannel : MSDeployLightening.Client.Console.ServiceReference1.IMSDeployAllTheThings, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MSDeployAllTheThingsClient : System.ServiceModel.ClientBase<MSDeployLightening.Client.Console.ServiceReference1.IMSDeployAllTheThings>, MSDeployLightening.Client.Console.ServiceReference1.IMSDeployAllTheThings {
        
        public MSDeployAllTheThingsClient() {
        }
        
        public MSDeployAllTheThingsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MSDeployAllTheThingsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MSDeployAllTheThingsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MSDeployAllTheThingsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool ShouldIUseMSDeploy() {
            return base.Channel.ShouldIUseMSDeploy();
        }
        
        public System.Threading.Tasks.Task<bool> ShouldIUseMSDeployAsync() {
            return base.Channel.ShouldIUseMSDeployAsync();
        }
        
        public System.DateTime WhenShouldIUseMSDeploy() {
            return base.Channel.WhenShouldIUseMSDeploy();
        }
        
        public System.Threading.Tasks.Task<System.DateTime> WhenShouldIUseMSDeployAsync() {
            return base.Channel.WhenShouldIUseMSDeployAsync();
        }
        
        public string WhoShouldUseMSDeploy(string yourName) {
            return base.Channel.WhoShouldUseMSDeploy(yourName);
        }
        
        public System.Threading.Tasks.Task<string> WhoShouldUseMSDeployAsync(string yourName) {
            return base.Channel.WhoShouldUseMSDeployAsync(yourName);
        }
    }
}
